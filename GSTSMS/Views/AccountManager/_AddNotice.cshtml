@model GSTSMSLibrary.AccountManager.AccountManager

@{
    ViewBag.Title = "AddNotice";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var selectedWing = ViewBag.SelectedWing as string ?? "All";
    var members = ViewBag.MemberList as List<GSTSMSLibrary.AccountManager.AccountManager> ?? new List<GSTSMSLibrary.AccountManager.AccountManager>();
    Layout = null;

    var today = DateTime.Now.ToString("yyyy-MM-dd");
    var after2Days = DateTime.Now.AddDays(2).ToString("yyyy-MM-dd");
}

<style>
    /* === Container and Layout === */
    .container {
        max-width: 850px;
        margin: 20px auto;
        padding: 25px;
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        font-family: 'Segoe UI', sans-serif;
    }

    .heading {
        font-size: 24px;
        margin-bottom: 20px;
        color: #2c3e50;
    }

    label {
        font-weight: 600;
        display: block;
        margin-bottom: 6px;
        color: #333;
    }

    .input, .textarea, select {
        width: 100%;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid #ccc;
        box-sizing: border-box;
        font-size: 14px;
        margin-bottom: 10px;
    }

    .textarea {
        resize: vertical;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 20px;
    }

    .column {
        flex: 1;
        min-width: 250px;
    }

    .section {
        margin-bottom: 20px;
    }

    /* === Member Checkbox Section === */
    .checkbox-scroll-box {
        max-height: 300px;
        overflow-y: auto;
        border: 1px solid #ddd;
        padding: 15px;
        border-radius: 8px;
        background-color: #fafafa;
    }

    .checkbox-group {
        margin-top: 10px;
        margin-left: 20px;
    }

    .checkbox-item {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
    }

    details summary {
        cursor: pointer;
        font-weight: 600;
        color: #2980b9;
        margin-top: 10px;
    }

    details[open] summary {
        color: #1abc9c;
    }

    /* === Buttons === */
    .button-row {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .btn-green {
        background-color: #27ae60;
        color: white;
        border: none;
        padding: 10px 18px;
        border-radius: 6px;
        cursor: pointer;
        /*box-shadow: 0 2px 6px #a8f5b4;
        background-color: #63ed7a;
        border-color: #63ed7a;
        color: #fff;*/
    }

        .btn-green:hover {
            background-color: #219150;
        }

    .btn-gray {
        background-color: #95a5a6;
        color: white;
        padding: 10px 18px;
        border-radius: 6px;
        text-decoration: none;
    }

        .btn-gray:hover {
            background-color: #7f8c8d;
        }

    /* === Alerts === */
    .alert-success {
        background-color: #dff0d8;
        padding: 10px 15px;
        border: 1px solid #d6e9c6;
        color: #3c763d;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .alert-error {
        background-color: #f2dede;
        padding: 10px 15px;
        border: 1px solid #ebccd1;
        color: #a94442;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    /* === Loading Spinner === */
    .loading-spinner {
        text-align: center;
        margin-bottom: 20px;
        display: none;
    }

        .loading-spinner img {
            width: 40px;
            margin-top: 10px;
        }

    .hidden {
        display: none !important;
    }

    .checkbox-scroll-box {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        background: #fefefe;
        margin-bottom: 15px;
        width: 500px;
    }

    .form-check {
        margin-bottom: 5px;
    }

        .form-check input {
            margin-right: 5px;
        }

    .wing-details {
        width: 324px;
        margin-top: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #fdfdfd;
        padding: 10px;
        margin-bottom: 10px;
    }

        .wing-details summary {
            cursor: pointer;
            font-weight: bold;
            padding: 5px;
        }

        .wing-details[open] summary {
            background-color: #e6f7ff;
            border-bottom: 1px solid #ccc;
        }

    .members-box {
        max-height: 200px; /* for scroll inside each wing */
        overflow-y: auto;
        padding-left: 10px;
        margin-top: 5px;
    }
</style>




<h2>AddNotice</h2>

<div class="container">
    <h4 class="heading">📢 Send New Notice</h4>

    @if (ViewBag.Message != null)
    {
        <div class="alert-success">@Html.Raw(ViewBag.Message)</div>
    }
    @if (ViewBag.Error != null)
    {
        <div class="alert-error">@Html.Raw(ViewBag.Error)</div>
    }

    <div id="loadingSpinner" class="loading-spinner hidden">
        <p>Please wait... Sending notice</p>
        <img src="~/Content/loader.gif" alt="Loading..." />
    </div>

    @using (Html.BeginForm("AddNotice", "AccountManager", FormMethod.Post, new { enctype = "multipart/form-data", id = "noticeForm" }))
    {
        @Html.AntiForgeryToken()

        <div class="row">
            <div class="column">
                <label>Notice Title</label>
                @Html.TextBoxFor(m => m.NoticeTitle, new { @class = "input", placeholder = "Enter title", required = "required" })
            </div>

            <div class="column">
                <label>Select Wing</label>
                @Html.HiddenFor(m => m.WingName, new { id = "hiddenWingName" })
                <select id="wingSelector" name="wingSelect" class="input" onchange="handleWingSelection(this)">
                    <option value="">-- Select --</option>
                    <option value="All" @(selectedWing == "All" ? "selected" : "")>All Members</option>
                    <option value="A" @(selectedWing == "A" ? "selected" : "")>Wing A</option>
                    <option value="B" @(selectedWing == "B" ? "selected" : "")>Wing B</option>
                    <option value="C" @(selectedWing == "C" ? "selected" : "")>Wing C</option>
                </select>
            </div>
        </div>

        @*<div class="section">
                <label><strong>Select Members (Checkboxes)</strong></label>
                <div class="checkbox-scroll-box">
                    @foreach (var wing in new[] { "A", "B", "C" })
                    {
                        <details id="details_@wing" @(selectedWing == wing || selectedWing == "All" ? "open" : "")>
                            <summary><strong>Wing @wing</strong></summary>
                            <div id="members_@wing" class="checkbox-group">
                                @foreach (var member in members.Where(m => m.FlatCode != null && m.FlatCode.StartsWith(wing)))
                                {
                                    var wingPrefix = member.FlatCode.Substring(0, 1);
                                    <label class="checkbox-item">
                                        <input type="checkbox"
                                               class="memberCheckbox member-@wingPrefix"
                                               name="ToEmailAddresses"
                                               value="@member.ToEmailAddress"
                                               id="chk_@member.ToEmailAddress"
                                               @(Model.ToEmailAddresses != null && Model.ToEmailAddresses.Contains(member.ToEmailAddress) ? "checked" : "") />
                                        @member.FullName (@member.FlatCode)
                                    </label>
                                }
                            </div>
                        </details>
                    }
                </div>
            </div>*@








        <label class="label">Select Member </label>
        <div class="checkbox-scroll-box,label">
            @foreach (var wing in new[] { "A", "B", "C" })
            {
                <details class="wing-details" id="details_@wing" @(selectedWing == wing || selectedWing == "ALL" ? "open" : "")>
                    <summary><strong>Wing @wing</strong></summary>
                    <div id="members_@wing" class="members-box">
                        @foreach (var member in members.Where(m => m.FlatCode.StartsWith(wing)))
                        {
                            <div class="form-check">
                                <input type="checkbox"
                                       class="memberCheckbox member-@wing"
                                       name="ToEmailAddresses"
                                       value="@member.ToEmailAddress"
                                       id="chk_@member.ToEmailAddress"
                                       @(member.IsSelected ? "checked" : "") />
                                <label for="chk_@member.ToEmailAddress">@member.FullName (@member.FlatCode)</label>
                            </div>
                        }
                    </div>
                </details>
            }
        </div>








        <div class="row">
            <div class="column">
                <label>Publish Date</label>
                <input type="date" name="PublishDate" class="input" value="@today" />
            </div>
            <div class="column">
                <label>End Date</label>
                <input type="date" name="EndDate" class="input" value="@after2Days" />
            </div>
        </div>

        <div class="section">
            <label>Description</label>
            @Html.TextAreaFor(m => m.Description, new { @class = "input textarea", rows = 5, placeholder = "Enter notice description here" })
        </div>

        <div class="section">
            <label>Attachment (PDF/JPG/PNG)</label>
            <input type="file" name="PostedFiles" class="input" multiple accept=".pdf,.jpg,.jpeg,.png" />
        </div>

        <div class="button-row">
            <button type="submit" class="btn-green">Send Notice</button>
            <button type="button" class="btn-gray" data-bs-dismiss="modal">Cancel</button>
        </div>

    }
</div>


<script>
    function handleWingSelection(dropdown) {
        const value = dropdown.value;
        document.getElementById("hiddenWingName").value = value;

        document.querySelectorAll(".memberCheckbox").forEach(cb => cb.checked = false);
        document.querySelectorAll("details").forEach(d => d.removeAttribute("open"));

        if (value === "All") {
            document.querySelectorAll(".memberCheckbox").forEach(cb => cb.checked = true);
            document.querySelectorAll("details").forEach(d => d.setAttribute("open", true));
        } else if (["A", "B", "C"].includes(value)) {
            document.querySelectorAll(".member-" + value).forEach(cb => cb.checked = true);
            const detailElement = document.getElementById("details_" + value);
            if (detailElement) detailElement.setAttribute("open", true);
        }
    }

    //document.getElementById("noticeForm").addEventListener("submit", function () {
    //    document.getElementById("loadingSpinner").classList.remove("hidden");
    //});
@*</script>
<script>*@
    document.getElementById("noticeForm").addEventListener("submit", function () {
        // Show overlay loader
        document.getElementById("overlayLoader").style.display = "flex";
    });

    // Handle success or error alert using ViewBag
    @if (ViewBag.Message != null)
    {
        <text>
        Swal.fire({
            icon: 'success',
            title: 'Notice Sent!',
            text: '@ViewBag.Message',
            timer: 3000,
            showConfirmButton: false
        });
        </text>
    }
    else if (ViewBag.Error != null)
    {
        <text>
        Swal.fire({
            icon: 'error',
            title: 'Failed to Send Notice',
            text: '@ViewBag.Error',
            showConfirmButton: true
        });
        </text>
    }
</script>

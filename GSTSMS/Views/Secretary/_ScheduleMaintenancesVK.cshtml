@model GSTSMSLibrary.Secretary.Secretary
<link href="~/Content/modules/datatables/datatables.css" rel="stylesheet" />
<link href="~/Content/modules/datatables/datatables.min.css" rel="stylesheet" />
<link href="~/Content/css/MaintenanceManagementVK.css" rel="stylesheet" />
<link href="~/Content/modules/izitoast/css/iziToast.min.css" rel="stylesheet" />
<link rel="stylesheet" href="~/Content/modules/bootstrap-daterangepicker/daterangepicker.css" />
<link rel="stylesheet" href="~/Content/css/style.css" />
<link rel="stylesheet" href="~/Content/css/components.css" />
<link rel="stylesheet" href="~/Content/css/custom-style.css" />
<section>
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header"></div>
                <div class="card-body">
                    <div class="table-responsive">
                        @Html.HiddenFor(model => model.StaffCode, new { id = "staffcode-hidden" })

                        @if (ViewBag.paid != "paid")
                        {
                            <table class="table table-bordered table-striped" id="myTable">
                                <thead style="background-color:lightsteelblue; color:black;">
                                    <tr>
                                        <th class="text-center">
                                            <div class="custom-checkbox custom-control">
                                                <input type="checkbox" class="custom-control-input" id="checkbox-all">
                                                <label for="checkbox-all" class="custom-control-label">&nbsp;</label>
                                            </div>
                                        </th>
                                        <th>SR no.</th>
                                        <th>Maintenance Name</th>
                                        <th>Total Amount</th>
                                        <th>Unpaid Amount</th>
                                        <th>Maintenance Per Resiend</th>
                                        <th>Start Date</th>
                                        <th>Deadline Date</th>
                                        <th width="100px">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{ int i = 0; }
                                    @foreach (var item in Model.List)
                                    {
                                        i++;
                                        <tr>
                                            <td>
                                                <div class="custom-checkbox custom-control">
                                                    <input type="checkbox" class="custom-control-input row-checkbox"
                                                           id="checkbox-@item.ID"
                                                           data-id="@item.ID"
                                                           data-amount="@item.Amount">
                                                    <label for="checkbox-@item.ID" class="custom-control-label">&nbsp;</label>
                                                </div>
                                            </td>
                                            <td>@i</td>
                                            <td>@item.MaintanceNamae</td>
                                            <td class="text-center">₹ @item.TotalAmount.00</td>
                                            <td class="text-center" style="color: orangered;">₹ @item.Amount.00</td>
                                            <td class="text-center">
                                                ₹ @item.TotalMainAmount.00
                                            </td>
                                            <td>
                                                @(DateTime.TryParse(item.CreateDates?.ToString(), out var createDate)
        ? createDate.ToString("yyyy-MM-dd")
        : "Invalid Date")
                                            </td>
                                            <td>
                                                @(DateTime.TryParse(item.CompleteDates?.ToString(), out var completeDate)
        ? completeDate.ToString("yyyy-MM-dd")
        : "Pending")
                                            </td>
                                            <td>
                                                <a href="javascript:void(0);" class="btn  btn-sm Detail .btn-gradient-details" data-id="@item.ID" data-staffcode="@item.StaffCode">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <table class="table table-bordered table-striped" id="paidmyTable">
                                <thead style="background-color:lightsteelblue; color:black;">
                                    <tr>
                                        <th class="text-center">
                                            <div class="custom-checkbox custom-control">
                                                <input type="checkbox" class="custom-control-input" id="checkbox-alls">
                                                <label for="checkbox-alls" class="custom-control-label">&nbsp;</label>
                                            </div>
                                        </th>
                                        <th>SR no.</th>
                                        <th>Maintenance Name</th>
                                        <th>Total Amount</th>
                                        <th>Maintenance Per Resiend</th>
                                        <th>Start Date</th>
                                        <th>Complete Date</th>
                                        <th width="100px">Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{ int i = 0; }
                                    @foreach (var item in Model.List)
                                    {
                                        i++;
                                        <tr>
                                            <td>
                                                <div class="custom-checkbox custom-control">
                                                    <input type="checkbox" class="custom-control-input row-checkboxs"
                                                           id="checkbox-@item.ID"
                                                           data-id="@item.ID"
                                                           data-amount="@item.Amount">
                                                    <label for="checkbox-@item.ID" class="custom-control-label">&nbsp;</label>
                                                </div>
                                            </td>
                                            <td>@i</td>
                                            <td>@item.MaintanceNamae</td>
                                            <td class="text-center">₹ @item.TotalAmount.00</td>
                                            <td class="text-center">₹ @item.TotalMainAmount.00</td>

                                            <td>
                                                @(DateTime.TryParse(item.CreateDates?.ToString(), out var createDate)
        ? createDate.ToString("yyyy-MM-dd")
        : "Invalid Date")
                                            </td>
                                            <td>
                                                @(DateTime.TryParse(item.CompleteDates?.ToString(), out var completeDate)
        ? completeDate.ToString("yyyy-MM-dd")
        : "Pending")
                                            </td>
                                            <td>
                                                <a href="javascript:void(0);" class="btn  btn-sm Detail .btn-gradient-details" data-id="@item.ID" data-staffcode="@item.StaffCode">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="~/Content/modules/datatables/datatables.js"></script>
<script src="~/Content/modules/datatables/datatables.min.js"></script>
<script src="~/Content/modules/izitoast/js/iziToast.min.js"></script>
<script src="~/Content/js/page/modules-toastr.js"></script>
<script src="~/Content/modules/moment.min.js"></script>
<script src="~/Content/modules/bootstrap-daterangepicker/daterangepicker.js"></script>
<script src="~/Content/js/page/forms-advanced-forms.js"></script>
<script src="~/Content/js/scripts.js"></script>
<script src="~/Content/js/custom.js"></script>


<script>
    $(document).ready(function () {

        initializeDateRangePicker();

        function setupCheckbox(tableId, checkboxAllId, rowCheckboxClass) {
            var table = $(tableId).DataTable();

            $(checkboxAllId).on('change', function () {
                var isChecked = $(this).prop("checked");
                $(tableId + ' ' + rowCheckboxClass).prop("checked", isChecked);
                updateSelectedItems();
            });

            $(tableId).on('change', rowCheckboxClass, function () {
                var total = $(tableId + ' ' + rowCheckboxClass).length;
                var checked = $(tableId + ' ' + rowCheckboxClass + ':checked').length;
                $(checkboxAllId).prop('checked', total === checked);
                updateSelectedItems();
            });
        }

        // Setup checkboxes
        setupCheckbox('#myTable', '#checkbox-all', '.row-checkbox');
        setupCheckbox('#paidmyTable', '#checkbox-alls', '.row-checkboxs');

        function updateSelectedItems() {
            var selectedList = [];
            var amount = 0;

            $('.row-checkbox:checked, .row-checkboxs:checked').each(function () {
                var rowId = $(this).data("id");
                var rowAmount = parseFloat($(this).data("amount")) || 0;
                amount += rowAmount;
                selectedList.push(`<li class='list-group-item'>Maintenance ID: ${rowId}, Amount: ₹${rowAmount.toFixed(2)}</li>`);
            });

            $("#amount").html(amount.toFixed(2));
            $("#selectedItems").html(selectedList.length > 0 ? selectedList.join("") : "<li class='list-group-item text-muted'>No records selected.</li>");
        }

        // View Detail Button Click
        $(document).on("click", ".Detail", function () {
            var id = $(this).data("id") || 0;
            var staffcode = $(this).data("staffcode") || 0;
            var massage = "pending";
            $.ajax({
                url: '@Url.Action("DetailsVK", "Secretary")',
                type: 'GET',
                data: { id: id, staffcode: staffcode, message: massage },
                success: function (data) {
                    $("#myModalContent").html(data);
                    $("#myModal").modal("show");
                },
                error: function () {
                    alert("Error loading details.");
                }
            });
        });

        // Delete Button Click
        $(document).on("click", ".btnDelete", function () {
            var id = $(this).data("id");
            if (confirm("Are you sure you want to delete this record?")) {
                $.ajax({
                    url: '@Url.Action("DeleteMaintenanceVK", "Secretary")',
                    type: 'POST',
                    data: { id: id },
                    success: function (response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert("Delete failed.");
                        }
                    },
                    error: function () {
                        alert("Error during deletion.");
                    }
                });
            }
        });

        // Destroy if already initialized
        if ($.fn.DataTable.isDataTable('#myTable')) {
            $('#myTable').DataTable().destroy();
        }
        if ($.fn.DataTable.isDataTable('#paidmyTable')) {
            $('#paidmyTable').DataTable().destroy();
        }

        var unpaidTable = $('#myTable').DataTable(getTableOptions('Unpaid Maintenance'));
        var paidTable = $('#paidmyTable').DataTable(getTableOptions('Paid Maintenance'));

        function getTableOptions(titlePrefix) {
            return {
                paging: true,
                ordering: true,
                info: true,
                pageLength: 5,
                searching: true,
                responsive: true,
                autoWidth: false,
                dom: '<"row mb-3"<"col-md-6 d-flex gap-2 align-items-center"B><"col-md-6 d-flex align-items-center justify-content-end"f>>rtip',
                buttons: [
                    {
                        extend: 'csv',
                        text: '<img src="/Content/img/icons8-csv-64 (1).png" title="CSV" alt="CSV" height="30" width="30"/>',
                        title: titlePrefix,
                        titleAttr: 'CSV',
                        action: function (e, dt, button, config) {
                            if ($('.row-checkbox:checked, .row-checkboxs:checked').length === 0) {
                                iziToast.warning({
                                    title: 'Warning',
                                    message: 'Please select at least one row to export.',
                                    position: 'topCenter',
                                    timeout: 5000
                                });
                                return;
                            }
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: ':not(:last-child)',
                            rows: function (idx, data, node) {
                                return $(node).find('.row-checkbox').is(':checked') || $(node).find('.row-checkboxs').is(':checked');
                            }
                        }
                    },
                    {
                        extend: 'excel',
                        text: '<img src="/Content/img/icons8-xls-64 (1).png" title="Excel" alt="Excel" height="30" width="30"/>',
                        title: titlePrefix,
                        titleAttr: 'Excel',
                        action: function (e, dt, button, config) {
                            if ($('.row-checkbox:checked, .row-checkboxs:checked').length === 0) {
                                iziToast.warning({
                                    title: 'Warning',
                                    message: 'Please select at least one row to export.',
                                    position: 'topCenter',
                                    timeout: 5000
                                });
                                return;
                            }
                            $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: ':not(:last-child)',
                            rows: function (idx, data, node) {
                                return $(node).find('.row-checkbox').is(':checked') || $(node).find('.row-checkboxs').is(':checked');
                            }
                        }
                    },
                    {
                        extend: 'pdf',
                        text: '<img src="/Content/img/icons8-pdf-64 (1).png" title="PDF" alt="PDF" height="30" width="30"/>',
                        titleAttr: 'PDF',
                        title: function () {
                            let date = new Date();
                            return `${titlePrefix} - Saved on ${date.toLocaleDateString('en-GB')}`;
                        },
                        orientation: 'landscape',
                        customize: function (doc) {
                            var now = new Date();
                            var jsDate = now.getDate() + '-' + (now.getMonth() + 1) + '-' + now.getFullYear();
                            doc.content.splice(0, 0, {
                                text: 'Saved Date: ' + jsDate,
                                margin: [0, 0, 0, 12],
                                alignment: 'right',
                                fontSize: 10
                            });
                        },
                        action: function (e, dt, button, config) {
                            if ($('.row-checkbox:checked, .row-checkboxs:checked').length === 0) {
                                iziToast.warning({
                                    title: 'Warning',
                                    message: 'Please select at least one row to export.',
                                    position: 'topCenter',
                                    timeout: 5000
                                });
                                return;
                            }
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, button, config);
                        },
                        exportOptions: {
                            columns: ':not(:last-child)',
                            rows: function (idx, data, node) {
                                return $(node).find('.row-checkbox').is(':checked') || $(node).find('.row-checkboxs').is(':checked');
                            }
                        }
                    }
                ]
            };
        }

        // ✅ Modern Date Range Picker Filter
        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            var tableId = settings.nTable.id;
            var dateColumnIndex = tableId === 'myTable' ? 6 : 5;

            var dateStr = data[dateColumnIndex];
            if (!dateStr || dateStr === "Invalid Date" || dateStr === "Pending") return false;

            var from = $('#fromDate1').val();
            var to = $('#toDate1').val();

            var rowDate = moment(dateStr, 'YYYY-MM-DD');
            var fromDate = from ? moment(from, 'YYYY-MM-DD') : null;
            var toDate = to ? moment(to, 'YYYY-MM-DD') : null;

            if (!rowDate.isValid()) return false;
            if (fromDate && rowDate.isBefore(fromDate, 'day')) return false;
            if (toDate && rowDate.isAfter(toDate, 'day')) return false;

            return true;
        });

        function initializeDateRangePicker() {
            var displayFormat = 'YYYY-MM-DD';
      
            $('.daterange-btn').daterangepicker({
                locale: { format: displayFormat },
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                },
                startDate: moment().startOf('month'),
                endDate: moment()
            },
                function (start, end) {
              
                $('#fromDate1').val(start.format(displayFormat));
                $('#toDate1').val(end.format(displayFormat));
                $('.daterange-btn span').html(start.format(displayFormat) + ' - ' + end.format(displayFormat));
                unpaidTable.draw();
                paidTable.draw();
            });

          
           
           
        }
    });
</script>





@model GSTSMSLibrary.Secretary.Secretary

@{
    Layout = null;
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<div class="container mt-4">
    <link href="~/Content/css/NoticeAndEmailSH.css" rel="stylesheet" />

    <div class="card shadow-sm rounded">

        <div class="card-body">
            @using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()



                <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
                if (TempData["Message"] != null)
                {
                    <script>
        Swal.fire({
            icon: '@(TempData["AlertType"] ?? "success")',
            title: 'Success!',
            text: '@Html.Raw(HttpUtility.JavaScriptStringEncode(TempData["Message"].ToString()))',
            confirmButtonColor: '#28a745'
        });
                    </script>
                }

                @Html.HiddenFor(m => m.SendBy)

                //new code


                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="noticeTitleDropdown">Notice Title </label>
                        <select id="noticeTitleDropdown" class="form-control" required>
                            <option value="">-- Select Notice Title --</option>
                            <option value="Maintenance Notice">Maintenance Notice</option>
                            <option value="Monthly Meeting">Monthly Meeting</option>
                            <option value="Security Alert">Security Alert</option>
                            <option value="Festival Invitation">Festival Invitation</option>
                            <option value="Water Supply Interruption">Water Supply Interruption</option>
                            <option value="Garbage Collection Schedule">Garbage Collection Schedule</option>
                            <option value="Parking Guidelines Update">Parking Guidelines Update</option>
                            <option value="Annual General Meeting">Annual General Meeting</option>
                            <option value="CCTV System Upgrade">CCTV System Upgrade</option>
                            <option value="Fire Drill Schedule">Fire Drill Schedule</option>
                            <option value="Custom" style="color: #dc2626; font-weight: bold;">➤ Custom Subject</option>
                        </select>
                    </div>

                    <!-- Custom Title Textbox - initially hidden -->
                    <div class="col-md-6" id="customTitleBox" style="display: none;">
                        <label><strong>Notice Title:</strong></label>
                        <input type="text" class="form-control" id="NoticeTitle" name="NoticeTitle" maxlength="30"
                               placeholder="Enter your custom title"
                               pattern="^[A-Za-z\s]{1,30}$"
                               title="Only letters and spaces allowed. Max 30 characters."
                               oninput="this.value = this.value.replace(/[^A-Za-z ]/g, '')"
                               required />
                    </div>
                </div>


                <div class="row mb-3">
                    <div class="col-md-6">
                        @Html.LabelFor(m => m.Description)
                        @Html.TextAreaFor(m => m.Description, new
                        {
                            @class = "form-control",
                            rows = 3,
                            maxlength = 500,
                            placeholder = "Enter a brief description...",
                            id = "Description",
                            required = "required",
                            oninput = "checkDescriptionLength(this)"
                        })
                        <small id="descCount" class="text-muted"></small>
                        @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })

                    </div>

                    <div class="col-md-6">
                        @Html.LabelFor(m => m.SelectedNoticeType)
                        @Html.DropDownListFor(m => m.SelectedNoticeType, Model.NoticeType, "---Select NoticeType ---", new { @class = "form-select", @required = "required", id = "NoticeType" })
                    </div>

                </div>


                <div class="row mb-3">

                    <div class="col-md-6">
                        @Html.LabelFor(m => m.SelectedForType)
                        @Html.DropDownListFor(m => m.SelectedForType, Model.Role, "---Select ForType ---", new { @class = "form-select", @required = "required", id = "ForType" })
                        @Html.ValidationMessageFor(m => m.SelectedForType, "", new { @class = "text-danger" })
                    </div>

                    @*<div class="col-md-6">
                            @Html.LabelFor(m => m.Members)
                            @Html.DropDownListFor(m => m.SelectedMember, Model.FullNameList, "---Select MemberName---", new { @class = "form-select", @required = "required", id = "SendTo" })
                            @Html.ValidationMessageFor(m => m.SelectedFullName, "", new { @class = "text-danger" })
                        </div>*@


                    <!-- Send To Type Selector -->
                    <div class="col-md-6 mb-3">
                        <label for="SendToType">Send To Type</label>
                        <select id="SendToType" class="form-select" required>
                            <option value="">-- Select Type --</option>
                            <option value="Member">Member</option>
                            <option value="Wing">WingName</option>
                        </select>
                    </div>

                    <!-- Dynamic Dropdown for Members or Wings -->
                    <div class="col-md-6 mb-3">
                        @Html.LabelFor(m => m.SelectedMember)
                        @Html.DropDownListFor(m => m.SelectedMember, new List<SelectListItem>(), "--- Select ---", new { @class = "form-select", id = "SendTo" })
                        @Html.ValidationMessageFor(m => m.SelectedFullName, "", new { @class = "text-danger" })
                    </div>


                </div>





                <div class="row mb-3">

                    <div class="col-md-6">
                        <label>Start Date</label>
                        <input type="date" id="StartDate" name="StartDate" class="form-control" required />
                    </div>
                    <div class="col-md-6">
                        <label>Deadline Date</label>
                        <input type="date" id="DeadLineDate" name="DeadLineDate" class="form-control" required />
                    </div>

                </div>

                <div class="form-group">
                    <label for="DocumentUpload" class="control-label">Upload Document</label>

                    <input type="file" name="DocumentUpload" id="DocumentUpload" class="form-control" onchange="showDocumentViewButton()" />

                    <a id="viewDocumentLink" href="#" target="_blank" style="display:none; margin-top:10px;" class="btn btn-link">
                        🔗 View Selected File
                    </a>

                    @Html.ValidationMessage("DocumentUpload", "", new { @class = "text-danger" })
                </div>

                <script>
                    function showDocumentViewButton() {
                        var input = document.getElementById("DocumentUpload");
                        var link = document.getElementById("viewDocumentLink");

                        if (input.files && input.files[0]) {
                            var file = input.files[0];
                            var objectUrl = URL.createObjectURL(file);

                            link.href = objectUrl;
                            link.style.display = "inline-block";
                        } else {
                            link.href = "#";
                            link.style.display = "none";
                        }
                    }
                </script>


                <input type="hidden" name="CreatedDate" value="@DateTime.Now.ToString("yyyy-MM-dd HH:mm")" />


                <div class="mb-3 d-flex justify-content-center">
                    <input type="submit" value="Add Notice" class="btn custom-success-btn" />
                </div>
            }
        </div>
    </div>
</div>


<script>



    document.querySelector("form").addEventListener("submit", function (e) {
        e.preventDefault();


        validateTitle();
        checkDescriptionLength(document.getElementById("Description"));
        validateRequiredDropdown("NoticeType", "Please select a notice type.");
        validateRequiredDropdown("ForType", "Please select a role.");
        validateRequiredDropdown("SendTo", "Please select a member.");
        const isDatesValid = validateDates();


        if (!isDatesValid || !this.checkValidity()) {
            return;
        }

        //  SweetAlert confirm
        Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to submit this notice?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, submit it!',
            cancelButtonText: 'No, cancel',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                this.submit();
            } else {
                window.location.href = '/Secretary/GetListSH';
            }
        });
    });

    // ✨ Helper validation functions
    function validateTitle() {
        const titleInput = document.getElementById("NoticeTitle");
        const value = titleInput.value.trim();
        const hasNumber = /\d/.test(value);

        if (!value) {
            titleInput.setCustomValidity("Insert into Notice Title");
        } else if (hasNumber) {
            titleInput.setCustomValidity("Notice Title must not contain numbers.");
        } else if (value.length > 30) {
            titleInput.setCustomValidity("Notice Title must not exceed 30 characters.");
        } else {
            titleInput.setCustomValidity("");
        }

        titleInput.reportValidity();
    }

    function checkDescriptionLength(textarea) {
        const maxLen = 500;
        const value = textarea.value.trim();
        const length = value.length;

        document.getElementById("descCount").textContent = `${length}/${maxLen} characters used`;

        if (!value) {
            //textarea.setCustomValidity("Insert into Description");
        } else if (length > maxLen) {
            textarea.setCustomValidity("Description cannot exceed 500 characters.");
        } else {
            textarea.setCustomValidity("");
        }

        textarea.reportValidity();
    }

    function validateRequiredDropdown(id, message) {
        const ddl = document.getElementById(id);
        if (!ddl.value || ddl.value.includes("Select")) {
            ddl.setCustomValidity(message);
        } else {
            ddl.setCustomValidity("");
        }
        ddl.reportValidity();
    }

    function validateDates() {
        const startInput = document.getElementById("StartDate");
        const deadlineInput = document.getElementById("DeadLineDate");

        const start = startInput.value.trim();
        const deadline = deadlineInput.value.trim();

        let isValid = true;

        startInput.setCustomValidity("");
        deadlineInput.setCustomValidity("");

        if (!start) {
            startInput.setCustomValidity("Please select Start Date.");
            isValid = false;
        }

        if (!deadline) {
            deadlineInput.setCustomValidity("Please select Deadline Date.");
            isValid = false;
        }

        if (start && deadline) {
            const startDate = new Date(start);
            const deadlineDate = new Date(deadline);

            if (deadlineDate <= startDate) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Invalid Dates',
                    text: 'Deadline Date must be greater than Start Date.',
                    confirmButtonColor: '#d33'
                });
                deadlineInput.setCustomValidity("Deadline Date must be greater than Start Date.");
                isValid = false;
            }
        }

        startInput.reportValidity();
        deadlineInput.reportValidity();

        return isValid;
    }

    // 👉 Real-time input validation
    document.getElementById("NoticeTitle").addEventListener("input", validateTitle);
    document.getElementById("Description").addEventListener("input", function () {
        checkDescriptionLength(this);
    });


    //description

    $(document).ready(function () {
        const noticeDescriptions = {
            "Maintenance Notice": "Maintenance work is scheduled in the society. Please avoid restricted areas during this time.",
            "Monthly Meeting": "The monthly society meeting will be held soon. All residents are requested to attend.",
            "Security Alert": "Please be alert. Report any suspicious activity to the security staff immediately.",
            "Festival Invitation": "You are invited to the society's festive celebrations. Join us with your family!",
            "Water Supply Interruption": "Please note that the water supply will be temporarily interrupted on [Date] between [Start Time] and [End Time] for essential maintenance. Kindly store adequate water in advance. We apologize for the inconvenience.",
            "Garbage Collection Schedule": "This is to inform you that the garbage collection schedule has changed. Going forward, bins will be collected on Mondays and Thursdays before 8:00 AM. Please ensure you place your waste bins outside the flat by 7:30 AM on these days.",
            "Parking Guidelines Update": "New parking guidelines have been implemented. Visitor parking slots are now available in Block A near Gate 2. Unauthorized vehicles parked in resident slots may be towed at the owner's expense. Please comply with the updated rules.",
            "Annual General Meeting": "You are cordially invited to the Annual General Meeting (AGM) of the Society on [Date] at [Time] in the Community Hall. Agenda includes financial statements, maintenance plans, and member suggestions. Your presence is highly appreciated.",
            "CCTV System Upgrade": "The CCTV surveillance system will be upgraded from [Start Date] to [End Date]. During this period, some camera feeds may be offline for short durations. We appreciate your cooperation and patience.",
            "Fire Drill Schedule": "A mandatory fire drill has been scheduled on [Date] at 10:00 AM in Block B. Please follow the instructions of the safety officers and evacuate immediately upon alarm. This drill is essential for everyone’s safety."
        };

        $('#noticeTitleDropdown').change(function () {
            const selected = $(this).val();

            if (selected === 'Custom') {
                $('#customTitleBox').show();
                $('#NoticeTitle').val('').prop('readonly', false);
                $('#Description').val('');
            } else {
                $('#customTitleBox').hide();
                $('#NoticeTitle').val(selected).prop('readonly', true);
                $('#Description').val(noticeDescriptions[selected] || '');
            }
        });
    });

</script>
<script>
    $(document).ready(function () {
        $('#SendToType').change(function () {
            var selectedType = $(this).val();

            if (selectedType) {
                $.ajax({
                    url: '/Secretary/GetSendToList',
                    type: 'GET',
                    data: { type: selectedType },
                    success: function (data) {
                        var $dropdown = $('#SendTo');
                        $dropdown.empty();
                        $dropdown.append($('<option>').val('').text('--- Select ---'));

                        $.each(data, function (i, item) {
                            $dropdown.append($('<option>').val(item.Value).text(item.Text));
                        });
                    },
                    error: function () {
                        alert('Error fetching data');
                    }
                });
            }
        });
    });
</script>


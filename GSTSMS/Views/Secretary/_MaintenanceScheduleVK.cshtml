@model GSTSMSLibrary.Secretary.Secretary
@{
    Layout = null;
}
<link href="~/Content/css/MaintenanceManagementVK.css" rel="stylesheet" />
<link href="~/Content/modules/izitoast/css/iziToast.min.css" rel="stylesheet" />
<div class="modal-header bg-gradient bg-primary text-white py-3 px-4">
    <h5 class="modal-title justify-content-center">
        <i class="bi bi-clipboard-data me-2"></i>  @(Model.ID > 0 ? "Update" : "Add") Monthly Maintenance
    </h5>
    <input type="text" class="form-control" id="maintenacecode" name="MaintenanceName" placeholder="Enter maintenance title" value="@Model.MaintenanceCode" />
    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
</div>

<div class="modal-body px-4 pt-4 pb-2">
    <div class="border rounded-3 p-4 shadow-sm mb-4 bg-light">
        <!-- First Row: Maintenance Title + Description -->
        <div class="row g-4">
            <!-- Maintenance Title -->
            <div class="col-md-6">
                <label for="MaintenanceName" class="form-label fw-bold">
                    Maintenance Title <sup class="text-danger">*</sup>
                </label>
                <input type="text" class="form-control" id="MaintenanceName" name="MaintenanceName"
                       placeholder="Enter maintenance title" value="@Model.MaintanceNamae" />
            </div>

            <!-- Description -->
            <div class="col-md-6">
                <label for="Description" class="form-label fw-bold">
                    Description <sup class="text-danger">*</sup>
                </label>
                <textarea class="form-control" id="Description" name="Description" rows="3"
                          placeholder="E.g. Water + Cleaning + Security">@Model.Description</textarea>
                <div class="invalid-feedback">Description must be at least 15 characters long.</div>
                <small id="descCounter" class="text-muted">0 / At least 15 characters</small>
            </div>
        </div>

        @if (Model.ID > 0)
        {
            <div class="row g-4 mt-3">
                <!-- Start Date -->
                <div class="col-md-6">
                    <label for="StartDatese" class="form-label fw-bold">
                        Start Date <sup class="text-danger">*</sup>
                    </label>
                    <input type="date" class="form-control" id="StartDatese" name="StartDate"
                           value="@Model.StartDate.ToString("yyyy-MM-dd")"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    <div class="invalid-feedback">Start date is required.</div>
                </div>

                <!-- Deadline Date -->
                <div class="col-md-6">
                    <label for="DeadlineDates" class="form-label font-weight-bold">
                        Deadline Date <sup class="text-danger">*</sup>
                    </label>
                    <input type="date" class="form-control" id="DeadlineDates" name="DeadlineDate"
                           value="@Model.DeadlineDate.ToString("yyyy-MM-dd")"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    <div class="invalid-feedback">Deadline date is required.</div>
                </div>
            </div>
        }
        else
        {
            <div class="row g-4 mt-3">
                <!-- Start Date -->
                <div class="col-md-6">
                    <label for="StartDatese" class="form-label fw-bold">
                        Start Date <sup class="text-danger">*</sup>
                    </label>
                    <input type="date" class="form-control" id="StartDatese" name="StartDate"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    <div class="invalid-feedback">Start date is required.</div>
                </div>

                <!-- Deadline Date -->
                <div class="col-md-6">
                    <label for="DeadlineDates" class="form-label fw-bold">
                        Deadline Date <sup class="text-danger">*</sup>
                    </label>
                    <input type="date" class="form-control" id="DeadlineDates" name="DeadlineDate"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    <div class="invalid-feedback">Deadline date is required.</div>
                </div>
            </div>
        }
    </div>

    <div class="table-responsive mb-4">
        <table class="table tab-bordered text-center" id="maintenanceItemTable">
            <thead class="table-primary">
                <tr>
                    <th>#</th>
                    <th>Maintenance Item</th>
                    <th>Amount (₹)</th>
                    @if (Model.ID > 0)
                    {
                        <th>Action</th>
                    }
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div class="fs-6 fw-semibold text-muted mb-3">
        Total Maintenance Amount:
        <span id="totalAmountLabel" class="badge bg-light">₹0.00</span>
    </div>
    @if (Model.ID > 0)
    {
        <div class="table-responsive mb-4">
            <table class="table tab-bordered text-center" id="updatemaintenanceItemTables">
                <thead class="table-secondary">
                    <tr>
                        <th>SrNo</th>
                        <th>Item</th>
                        <th>Amount (₹)</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    }
    <div class="text-end">
        <button id="btnSaveMaintenance" class="btn btn-success">
            <i class="bi bi-send-check-fill me-2"></i> @(Model.ID > 0 ? "Update" : "Save") Maintenance
        </button>
    </div>
</div>
<script src="~/Content/modules/izitoast/js/iziToast.min.js"></script>
<script src="~/Content/js/page/modules-toastr.js"></script>

<script>
    function updateTotalAmount() {
        let total = 0;
        $('#maintenanceItemTable .item-amount').each(function () {
            total += parseFloat($(this).text().replace('₹', '')) || 0;
        });
        $('#totalAmountLabel').text(`₹${total.toFixed(2)}`);
    }

    function reindexTables() {
        $('#maintenanceItemTable tbody tr').each(function (index) {
            $(this).find('td:first').text(index + 1);
        });
        $('#updatemaintenanceItemTables tbody tr').each(function (index) {
            $(this).find('td:first').text(index + 1);
        });
    }

    function moveToMain(row) {
        const name = row.find('td:eq(1)').text().trim();
        const amount = parseFloat(row.find('td:eq(2)').text().replace('₹', '')) || 0;

        if (!isItemAlreadyExists('#maintenanceItemTable', name)) {
            let newRow = `<tr>
                <td></td>
                <td class="text-start">${name}</td>
                <td class="text-center item-amount">₹${amount.toFixed(2)}</td>
                <td><button class="btn btn-sm btn-danger btn-remove">Remove</button></td>
            </tr>`;

            $('#maintenanceItemTable tbody').append(newRow);
            row.remove();
            reindexTables();
            updateTotalAmount();
        }
    }

    function moveToRemoved(row) {
        const name = row.find('td:eq(1)').text().trim();
        const amount = parseFloat(row.find('td:eq(2)').text().replace('₹', '')) || 0;

        if (!isItemAlreadyExists('#updatemaintenanceItemTables', name)) {
            let newRow = `<tr>
                <td></td>
                <td class="text-start">${name}</td>
                <td class="text-center">₹${amount.toFixed(2)}</td>
                <td><button class="btn btn-sm btn-success btn-restore">Add</button></td>
            </tr>`;

            $('#updatemaintenanceItemTables tbody').append(newRow);
            row.remove();
            reindexTables();
            updateTotalAmount();
        }
    }
    $('#StartDatese, #DeadlineDates').on('change', function () {

        var min = $('#StartDatese').val();
        var max = $('#DeadlineDates').val();

        if (min && max && new Date(min) >= new Date(max)) {
            iziToast.warning({
                title: 'Warning',
                message: 'Start Date should not be after Deadline Date',
                position: 'topCenter',
                timeout: 5000,
                icon: 'fas fa-exclamation-triangle',
                backgroundColor: '#ffc107',
                titleColor: '#000',
                messageColor: '#000',
                progressBarColor: '#000',
                transitionIn: 'bounceInLeft',
                transitionOut: 'fadeOutRight',
                close: true
            });
            $('#DeadlineDates').val('');
            return;
        }

    });
    $('#MaintenanceName, #Description, #StartDatese, #DeadlineDates').on('input change', function () {
        const $input = $(this);
        const value = $input.val().trim();

        if (value) {
            $input.removeClass('is-invalid');
            $input.next('.invalid-feedback').hide();
        }
    });
    $('#Description').on('input', function () {
        const $input = $(this);
        const value = $input.val().trim();
        const counter = $('#descCounter');

        counter.text(value.length + ' / 15 characters');

        if (value.length >= 15) {
            $input.removeClass('is-invalid');
            $input.next('.invalid-feedback').hide();
            counter.removeClass('text-danger').addClass('text-success');
        } else {
            $input.addClass('is-invalid');
            $input.next('.invalid-feedback').text('Description must be at least 15 characters long.').show();
            counter.removeClass('text-success').addClass('text-danger');
        }
    });
    function isItemAlreadyExists(tableSelector, itemName) {
        let exists = false;
        $(`${tableSelector} tbody tr`).each(function () {
            const existingName = $(this).find('td:eq(1)').text().trim();
            if (existingName === itemName) {
                exists = true;
                return false;
            }
        });
        return exists;
    }

    $(document).on('click', '.btn-remove', function () {
        moveToRemoved($(this).closest('tr'));
    });

    $(document).on('click', '.btn-restore', function () {
        moveToMain($(this).closest('tr'));
    });

    $(document).ready(function () {
        debugger
           @if (Model.ID<0)
            {
                 <text>

               $('#StartDatese').val('');
               $('#DeadlineDates').val('');
                   </text>
            }
        $('#maintenacecode').hide();
        // Populate only on first load (clear any existing rows to avoid duplicates)
        $('#maintenanceItemTable tbody').empty();
        $('#updatemaintenanceItemTables tbody').empty();

        @if (Model.List != null)
        {
            foreach (var item in Model.List)
            {
                <text>
                $('#maintenanceItemTable tbody').append(`
                    <tr>
                        <td></td>
                        <td class="text-start">@item.MaintanceNamae</td>
                        <td class="text-center item-amount">₹@item.Amount.ToString("0.00")</td>
                        @if (Model.ID > 0) {
                        <td><button class="btn btn-sm btn-danger btn-remove">Remove</button></td>
                        }
                    </tr>`);
                </text>
            }
        }
        @if (Model.ID> 0) {

        if (Model.MonthMaintenanceList != null)
        {
            foreach (var item in Model.MonthMaintenanceList)
            {
                <text>
                $('#updatemaintenanceItemTables tbody').append(`
                    <tr>
                        <td></td>
                        <td class="text-start">@item.MaintanceNamae</td>
                        <td class="text-center">₹@item.Amount.ToString("0.00")</td>
                        <td><button class="btn btn-sm btn-success btn-restore">Add</button></td>
                    </tr>`);
                </text>
            }
        }
        }

        reindexTables();
        updateTotalAmount();


      $('#btnSaveMaintenance').click(function (e) {
          e.preventDefault();
          debugger
    const maintenanceNames = $('#MaintenanceName').val().trim();
    const descriptions = $('#Description').val().trim();
    const startDates= $('#StartDatese').val();
    const deadlineDates = $('#DeadlineDates').val();
    const maintenanceAmounts = parseFloat($('#totalAmountLabel').text().replace('₹', '').trim()) || 0;
    const MaintenanceCodes = $('#maintenacecode').val().trim();
          if (!maintenanceNames) {
              showInvalid('MaintenanceName', 'Please enter maintenance title.');
              return;
          }
          if (!descriptions || descriptions.length < 15) {
              showInvalid('Description', 'Description must be at least 15 characters long.');
              return;
          }
          if (!startDates) {
              showInvalid('StartDates', 'Start date is required.');
              return;
          }
          if (!deadlineDates) {
              showInvalid('DeadlineDate', 'Deadline date is required.');
              return;
          }


    const maintenanceItems = [];
    $('#maintenanceItemTable tbody tr').each(function () {
        const itemName = $(this).find('td:eq(1)').text().trim();
        const itemAmount = parseFloat($(this).find('td:eq(2)').text().replace('₹', '').trim()) || 0;

        maintenanceItems.push({
            MainName: itemName,
            Amount: itemAmount
        });
    });

   
    const secretary = {
        MaintanceNamae: maintenanceNames,
        Description: descriptions,
        CreateDates: startDates,
        CompleteDates: deadlineDates,
        TotalAmount: maintenanceAmounts,
        MonthMaintenanceList: maintenanceItems,
        MaintenanceCode: MaintenanceCodes
    };

    Swal.fire({
        title: "Are you sure?",
        text: "Once saved, you cannot modify or delete.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, Save it!",
        cancelButtonText: "No, Cancel!",
        customClass: {
            confirmButton: "btn btn-success me-2",
            cancelButton: "btn btn-danger"
        },
        buttonsStyling: false
    }).then((result) => {
        if (result.isConfirmed) {
            Swal.fire({
                title: 'Saving...',
                text: 'Please wait while we save your data.',
                allowOutsideClick: false,
                allowEscapeKey: false,
                didOpen: () => Swal.showLoading()
            });

            $.ajax({
                url: '@Url.Action("SaveMaintenanceVK", "Secretary", new { staffcode = Model.StaffCode })',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(secretary),
                success: function (response) {
                    Swal.close();

                    if (response.success) {
                        Swal.fire({
                            title: "Saved Successfully!",
                            text: "Your Maintenance has been saved successfully.",
                            icon: "success",
                            timer: 1500,
                            timerProgressBar: true,
                            showConfirmButton: false
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: "Save Failed",
                            text: "Unable to save your Maintenance data.",
                            icon: "error"
                        });
                    }
                },
                error: function () {
                    Swal.close();
                    Swal.fire("Error!", "Server error occurred.", "error");
                }
            });
        }
    });
});


    });
</script>
<script>
    function validateDateRange() {
        var fromDate = new Date($('#StartDates').val());
        var toDate = new Date($('#EndDate').val());
        var today = new Date();
        var errorSpan = $('#dateError');

        errorSpan.hide().text('');

        // Convert to midnight to avoid time issues
        fromDate.setHours(0, 0, 0, 0);
        toDate.setHours(0, 0, 0, 0);
        today.setHours(0, 0, 0, 0);

        if ($('#StartDates').val() && $('#EndDate').val()) {
            if (fromDate > toDate) {
                errorSpan.text("From Date should not be after To Date.").show();
                $('#EndDate').val('');
                return false;
            }
        }

        if (toDate > today) {
            errorSpan.text("To Date cannot be in the future.").show();
            $('#EndDate').val('');
            return false;
        }

        return true;
    }
    $('#StartDates, #DeadlineDate').on('change', function () {
        var min = $('#StartDates').val();
        var max = $('#DeadlineDate').val();

        if (min && max && new Date(min) > new Date(max)) {
            alert("From Date should not be after To Date.");
            $('#DeadlineDate').val('');
            return;
        }

    });

</script>
